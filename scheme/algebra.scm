(define mul-table '(('() 0 1 2 3 4 5 6)
                      (0 0 1 2 3 4 5 6)
                      (1 1 2 3 4 5 6 0)
                      (2 2 3 4 5 6 0 4)
                      (3 3 4 5 6 0 1 2)
                      (4 4 5 6 0 1 2 3)
                      (5 5 6 0 1 2 3 4)
                      (6 6 0 1 2 3 4 5)))

(define (mul a b)
  (define (find-row a)
	(let loop ((lst (cdr mul-table)))
	  (if (equal? (caar lst) a)
		  (car lst)
		  (loop (cdr lst)))))
  (let loop ((row (cdr (find-row a)))
			 (top (cdr (car mul-table))))
	(if (equal? (car top) b)
	    (car row)
		(loop (cdr row) (cdr top)))))
